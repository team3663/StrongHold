package org.usfirst.frc.team3663.robot;


import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SensorBase;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This is a demo program showing the use of the RobotDrive class, specifically it 
 * contains the code necessary to operate a robot with tank drive.
 *
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SampleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 *
 * WARNING: While it may look like a good choice to use for your code if you're inexperienced,
 * don't. Unless you know what you are doing, complex code will be much more difficult under
 * this system. Use IterativeRobot or Command-Based instead if you're new.
 */
public class Robot extends SampleRobot{
    RobotDrive myRobot;  // class that handles basic drive operations
    Joystick LittleKidStick;
    Joystick ControllStick;
    
    // set to ID 1 in DriverStation
    CANTalon RDM, LDM;
    public Robot() {
    	RDM = new CANTalon(10);
    	LDM = new CANTalon(20);
        myRobot = new RobotDrive(RDM, LDM);
        myRobot.setExpiration(0.1);
        LittleKidStick = new Joystick(0);
        ControllStick = new Joystick(1);

    }

    
    /**
     * Runs the motors with tank steering.
     */
    public void operatorControl() {
        myRobot.setSafetyEnabled(true);
        while (isOperatorControl() && isEnabled()) {
        	double z = 0;
        	double y = 0;
        	lidar a = new lidar();
        	int aa = a.number();
        	SmartDashboard.putNumber("lidar distance", aa);
        	if(!ControllStick.getRawButton(1)){
        		z = LittleKidStick.getX()/2;
        		y = LittleKidStick.getY()/2;
        	}
        	else{
        		z = ControllStick.getRawAxis(0);
        		y = ControllStick.getRawAxis(1);
        	}
        	myRobot.arcadeDrive(y, z);
            Timer.delay(0.005);		// wait for a motor update time
        }
    }

}

class lidar extends SensorBase{
	public int number(){
        I2C sensor1 = new I2C(I2C.Port.kMXP,0x62);
    	byte[] buffer;
    	buffer = new byte[2];	
    	sensor1.write(0x00, 0x04);
    	Timer.delay(.04);
    	sensor1.read(0x8f, 2, buffer);
    	SmartDashboard.putNumber("number 1", buffer[0]);    
		return (int)Integer.toUnsignedLong(buffer[0] << 8) + Byte.toUnsignedInt(buffer[1]);
	}
}
