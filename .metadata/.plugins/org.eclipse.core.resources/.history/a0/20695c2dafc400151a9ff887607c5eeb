package org.usfirst.frc.team3663.robot.subsystems;

import org.usfirst.frc.team3663.robot.Robot;
import org.usfirst.frc.team3663.robot.commands.C_DriveTrain;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class SS_DriveTrain extends Subsystem {
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	private CANTalon leftDriveMotor = new CANTalon(10);
	private CANTalon rightDriveMotor = new CANTalon(20);
	private RobotDrive driveTrain = new RobotDrive(leftDriveMotor, rightDriveMotor);
	private Encoder leftEncoder = new Encoder(2,3);
	private Encoder rightEncoder = new Encoder(0,1);
	
	
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        setDefaultCommand(new C_DriveTrain());
        driveTrain.setSafetyEnabled(false);
    }
    
    public void driveByJoystick(Joystick control, String controllerName){
    	if(controllerName.contains("Extreme 3D")){
        	driveTrain.arcadeDrive(control.getRawAxis(1), control.getRawAxis(2));    		
    	}
    	else{
        	driveTrain.arcadeDrive(control.getRawAxis(0), control.getRawAxis(1));        		
    	}
    }
    
    public void FairDriving(Joystick overRideControll, Joystick childControll){
    	if(overRideControll.getName().contains("F310")){
    		if(overRideControll.getRawButton(5) && overRideControll.getRawButton(6)){
    			driveTrain.arcadeDrive(overRideControll.getRawAxis(1), overRideControll.getRawAxis(0));
    		}
    		else if(overRideControll.getRawButton(1)){
    			driveTrain.arcadeDrive(childControll.getRawAxis(1)/2, childControll.getRawAxis(2)/2);
    		}
    		else{
    			STOP();
    		}
    	}
    }
    
    public void STOP(){
    	driveTrain.arcadeDrive(0, 0);
    	leftDriveMotor.set(0);
    	rightDriveMotor.set(0);    	
    }
    
    public void updateBoard(){
    	SmartDashboard.putNumber("Left Encoder : ", leftEncoder.getRaw());
    	SmartDashboard.putNumber("Right Encoder : ", rightEncoder.getRaw());
    	SmartDashboard.putNumber("/3.7209 = ", (double)((double)rightEncoder.getRaw()/3.72093023255814));
    }
    
    public void clearEncoder(){
    	leftEncoder.reset();
    	rightEncoder.reset();
    	leftEncoderLastTicks = 0;
    }
    
 /***********************ENCODERS***************************/   
    	//left encoder 500 rotation
    	//right encoder 2000 rotation 
    	//6" Diameter wheel has a distance of 18.84
    	//left encoder 43 ticks per in
    	//right encoder 160 ticks per in
    	//if the right encoder is divided by 3.7209 then it will be referenced off of a 43 plane
    public int targetValue(int inches){
    	return inches*43;
    }
    
    public boolean hitTarget(int distance){
    	return(distance < leftEncoder.getRaw());
    }
    
    private int leftEncoderLastTicks = 0;
    private int rightEncoderLastTicks = 0;
    
    public double setMotorSpeed(double speed, int target){
    	int LEncT = leftEncoder.getRaw();
    	int REncT = rightEncoder.getRaw();
    	if(speed > .1 && (((LEncT - leftEncoderLastTicks)*(speed*10))+leftEncoderLastTicks) > target){
    		speed -= .1;
    	}
    	leftDriveMotor.set(-speed);    	
    	rightDriveMotor.set(speed);
    	leftEncoderLastTicks = LEncT;
    	return speed;
    }    
}

